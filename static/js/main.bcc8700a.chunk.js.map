{"version":3,"sources":["components/LeftPanel.js","store/slices.js","components/archPanel/Feature.js","components/archPanel/FeatureList.js","components/archPanel/Layer.js","components/archPanel/LayerList.js","components/archPanel/ArchPanel.js","components/audioPanel/Audio.js","components/audioPanel/AudioList.js","components/audioPanel/Modes.js","components/audioPanel/AudioPanel.js","components/App.js","store/store.js","serviceWorker.js","index.js"],"names":["LeftPanel","className","AudioInfoSlice","createSlice","name","initialState","layerNum","featureNum","mode","reducers","setLayerFeatureNum","state","action","payload","setMode","model","actions","getAudioList","createSelector","audioInfo","ans","base","i","push","audioInfoReducer","reducer","Feature","num","dispatch","useDispatch","onClick","e","FeatureList","features","map","ind","key","Layer","LayerList","layers","ArchPanel","Audio","link","AudioList","audios","useSelector","Modes","AudioPanel","App","configureStore","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bcc8700a.chunk.js","sourcesContent":["import React from \"react\";\n\nconst LeftPanel = () => {\n    return (<div className=\"AppItem LeftPanel\">\n    </div>)\n}\n\n\nexport default LeftPanel;","import {createSlice} from '@reduxjs/toolkit';\nimport {createSelector} from 'reselect';\n\nexport const AudioInfoSlice = createSlice({\n    name: 'audioInfo',\n    initialState: {\n        layerNum: 1,\n        featureNum: 1,\n        mode: 1\n    },\n    reducers: {\n        setLayerFeatureNum: (state, action) => {\n            state.layerNum = action.payload.layerNum;\n            state.featureNum = action.payload.featureNum;\n        },\n        setMode: (state, action) => {\n            state.model = action.payload.mode;\n        }\n    },\n});\n\nexport const {setLayerFeatureNum, setMode} = AudioInfoSlice.actions;\n\nconst selectMode = state => state.audioInfo.mode;\nconst selectLayerNum = state => state.audioInfo.layerNum;\nconst selectFeatureNum = state => state.audioInfo.featureNum;\n\nexport const getAudioList = createSelector(\n    [selectMode, selectLayerNum, selectFeatureNum],\n    (mode, layerNum, featureNum) => {\n        const ans = [];\n        const base = 'www.base.com';\n        if (mode === 1) {\n            for (let i = 0; i < 10; i++) {\n                ans.push(`${base}/${i}/${mode}/${layerNum}/${featureNum}/`);\n            }\n        } else if (mode === 1) {\n            for (let i = 0; i < 10; i++) {\n                ans.push(`${base}/${i}/${mode}/${layerNum}/${featureNum}/`);\n            }\n        } else if (mode === 2) {\n            for (let i = 0; i < 10; i++) {\n                ans.push(`${base}/${i}/${mode}/${layerNum}/${featureNum}/`);\n            }\n        }\n        return ans;\n    })\n\nexport const audioInfoReducer = AudioInfoSlice.reducer;\n","import React from \"react\";\nimport {setLayerFeatureNum} from \"../../store/slices\";\nimport {useDispatch} from 'react-redux';\n\nconst Feature = ({num, layerNum}) => {\n    const dispatch = useDispatch();\n    const handleClick = (e) => {\n        dispatch(setLayerFeatureNum({layerNum: layerNum, featureNum: num}))\n    }\n    return <div className=\"Feature\" onClick={handleClick}></div>\n}\n\nexport default Feature;","import React from \"react\";\nimport Feature from \"./Feature\";\n\nconst FeatureList = ({layerNum}) => {\n    const feature_ind = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    const features = feature_ind.map((ind) => <Feature key={ind} num={ind} layerNum={layerNum}/>);\n    return <div className=\"FeatureList\">{features}</div>\n}\n\nexport default FeatureList;","import React from \"react\";\nimport FeatureList from \"./FeatureList\";\n\nconst Layer = ({num}) => {\n    return <div className=\"Layer\">\n        <FeatureList layerNum={num}/>\n    </div>\n}\n\nexport default Layer;","import React from \"react\";\nimport Layer from \"./Layer\";\n\nconst LayerList = () => {\n    const layers_ind = [1, 2, 3, 4, 5, 6, 7]\n    const layers = layers_ind.map((ind) => {\n        return <Layer key={ind} num={ind}/>\n    })\n    return (<div className=\"LayerList\">{layers}</div>)\n}\n\nexport default LayerList;","import React from \"react\";\nimport LayerList from \"./LayerList\";\n\nconst ArchPanel = () => {\n    return <div className=\"AppItem ArchPanel\">\n        <LayerList/>\n    </div>\n}\n\nexport default ArchPanel;","import React from \"react\";\n\nconst Audio = ({link}) => {\n    return <div className=\"Audio\">{link}</div>\n}\n\nexport default Audio;","import React from \"react\";\nimport Audio from \"./Audio\";\nimport {useSelector} from 'react-redux';\nimport {getAudioList} from \"../../store/slices\";\n\nconst AudioList = () => {\n    const list = useSelector(getAudioList);\n    const audios = list.map((link) => <Audio key={link} link={link}/>);\n    return <div className=\"AudioList\">{audios}</div>\n}\n\nexport default AudioList;","import React from \"react\";\n\nconst Modes = () => {\n    return <div className=\"Modes\">\n        <button className=\"Button\">Mode1</button>\n        <button className=\"Button\">Mode2</button>\n        <button className=\"Button\">Mode3</button>\n    </div>\n}\n\nexport default Modes;","import React from \"react\";\nimport AudioList from \"./AudioList\";\nimport Modes from \"./Modes\";\n\nconst AudioPanel = () => {\n    return <div className=\"AppItem AudioPanel\">\n        <AudioList/>\n        <Modes/>\n    </div>\n}\n\nexport default AudioPanel;","import React from 'react';\nimport '../css/app.css';\nimport '../css/leftPanel.css';\nimport '../css/archPanel.css';\nimport '../css/audioPanel.css';\nimport LeftPanel from \"./LeftPanel\";\nimport ArchPanel from \"./archPanel/ArchPanel\";\nimport AudioPanel from \"./audioPanel/AudioPanel\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <LeftPanel/>\n            <ArchPanel/>\n            <AudioPanel/>\n        </div>\n    );\n}\n\nexport default App;\n","import {configureStore} from '@reduxjs/toolkit';\nimport {audioInfoReducer} from './slices'\n\nexport default configureStore({\n    reducer: {\n        audioInfo: audioInfoReducer,\n    },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport store from './store/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}